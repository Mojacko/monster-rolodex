{"version":3,"sources":["Components/card/card.component.jsx","Components/card-list/card-list.component.jsx","Components/searchbar/seachbar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","src","alt","CardList","monsters","map","monster","key","Searchbar","placeholder","handleChange","type","onChange","App","getMonsterData","a","async","fetch","userData","json","userJson","setState","console","log","e","searchString","target","value","state","this","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAYaA,G,MAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAIC,EAAb,EAAaA,MAAb,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BH,EAA1B,aAAyCI,IAAI,KACrD,4BAAKL,GACL,2BAAIE,MCXCI,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACpB,yBAAKJ,UAAU,aACVI,EAASC,KAAI,SAAAC,GAAO,OACjB,kBAAC,EAAD,CACIC,IAAKD,EAAQR,GACbA,GAAIQ,EAAQR,GACZD,KAAMS,EAAQT,KACdE,MAAOO,EAAQP,cCTlBS,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIV,UAAU,SACVW,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCiDHG,G,kBAnDX,aAAe,IAAD,8BACV,+CAeJC,eAAiB,4BAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAEcE,MACnB,+CAHK,cAEHC,EAFG,kBAAAH,EAAA,MAKcG,EAASC,QALvB,OAKHC,EALG,OAMT,EAAKC,SAAS,CAAEjB,SAAUgB,IANjB,kDAQTE,QAAQC,IAAI,kDARH,0DAhBH,EA4Bdb,aAAe,SAAAc,GACX,EAAKH,SAAS,CAAEI,aAAcD,EAAEE,OAAOC,SA1BvC,EAAKC,MAAQ,CACTxB,SAAU,GACVqB,aAAc,IALR,E,iFAaVI,KAAKf,mB,+BAmBC,IAAD,EAC8Be,KAAKD,MAAhCxB,EADH,EACGA,SAAUqB,EADb,EACaA,aAEZK,EAAkB1B,EAAS2B,QAAO,SAAAzB,GAAO,OAC3CA,EAAQT,KAAKmC,cAAcC,SAASR,EAAaO,kBAErD,OACI,yBAAKhC,UAAU,OACX,wBAAIA,UAAU,SAAd,mBACA,kBAAC,EAAD,CACIS,YAAY,iBACZC,aAAcmB,KAAKnB,eAEvB,kBAAC,EAAD,CAAUN,SAAU0B,S,GA9ClBI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef119066.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../card/card.styles.css\";\r\n/* \r\nexport default props => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <h1>{props.monster.name}</h1>\r\n        </div>\r\n    );\r\n};\r\n */\r\n\r\nexport const Card = ({ name, id, email }) => (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${id}?set=set2`} alt=\"\" />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n    </div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nimport \"./card-styles.css\";\r\n\r\nexport const CardList = ({ monsters }) => (\r\n    <div className=\"card-list\">\r\n        {monsters.map(monster => (\r\n            <Card\r\n                key={monster.id}\r\n                id={monster.id}\r\n                name={monster.name}\r\n                email={monster.email}\r\n            />\r\n        ))}\r\n    </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./searchbar-styles.css\";\r\n\r\nexport const Searchbar = ({placeholder, handleChange}) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n); \r\n\r\n\r\n","import React, { Component } from \"react\";\nimport { CardList } from \"./Components/card-list/card-list.component\";\nimport { Searchbar } from \"./Components/searchbar/seachbar.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchString: \"\"\n        };\n    }\n\n    componentDidMount() {\n        /* fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users})); */\n        this.getMonsterData();\n    }\n\n    getMonsterData = async () => {\n        try {\n            const userData = await fetch(\n                \"https://jsonplaceholder.typicode.com/users\"\n            );\n            const userJson = await userData.json();\n            this.setState({ monsters: userJson });\n        } catch (err) {\n            console.log(\"There was an error trying to make the request.\");\n        }\n    };\n\n    handleChange = e => {\n        this.setState({ searchString: e.target.value });\n    };\n\n    render() {\n        const { monsters, searchString } = this.state;\n\n        const filteredMonster = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchString.toLowerCase())\n        );\n        return (\n            <div className=\"App\">\n                <h1 className=\"title\">Monster Rolodex</h1>\n                <Searchbar\n                    placeholder=\"Search Monster\"\n                    handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonster} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}